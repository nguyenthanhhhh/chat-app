<!DOCTYPE html>
<html lang="en">

<head>
    
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <script src="/socket.io/socket.io.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/qs/6.11.1/qs.min.js"
        integrity="sha512-5Zv/hNtOKSkeScnIYOqGjng82gQSHsCoyqq9TgrJLgYa032cUYWH4kF1ayS8Gz1Jfge7e8MaBF6AeEvoQ92v8w=="
        crossorigin="anonymous" referrerpolicy="no-referrer"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/axios/1.4.0/axios.min.js"></script>
</head>

<body>

</body>

</html>




<form class="form-inline my-2 my-lg-0" action="/user/logout">
    <button class="btn btn-outline-success my-2 my-sm-0" type="submit">Đăng xuất</button>
</form>


<div id="block-chat">
    <div id="list-user-block">
       
        {{#each allFriend}}
        <form action="/user/inbox/{{this.userNameFriend}}" method="post">
            <input type="hidden" name="userNameF" value="{{this.userName}}">
            <input type="hidden" name="userNameT" value="{{this.userNameFriend}}">
            <button class="friend-item" type="submit">{{this.userNameFriend}}</button>
        </form>
        {{/each}}

    </div>

    <div class="full-message-block">
        <div class="username-inbox">
            <h4>{{userNameT}}</h4>
        </div>
        <div id="message-block">
            {{#each allMessage}}
            <div class="message-item" id="message-item">
                
                <div class="message__row2">
                    <p class="message__content">
                        {{this.message}}
                    </p>
                    <p class="message__date">{{this.createdAt}}</p>

                </div>
                
            </div>
            {{/each}}
        </div>
        <div id="form-message-block">
            <form id="form-message">
                <div class="control-row">
                    <input type="text" id="input-message" placeholder="Nhập tin nhắn">
                    <button class="btn-send-mess" type="submit">Gửi</button>
                    <button class="btn-send-mess" type="button" id="btn-share-location"><i class="ti-location-pin"></i></button>
                </div>
            </form>

        </div>
    </div>

    
</div>






{{!-- PHẦN NÀY LÀ BACKEND --}}
<script>
    const name = '{{ userChat.userName }}';
    const room = "defaultRoom"
    const userNameT = '{{userNameT}}'

    const renderMessage = (message) => {
        const html = `
        <div class="message-item" id="message-item">
            <div class="message__row1">
              <p class="message__name">${message.userNameF}</p>
              <p class="message__date">${message.message.createdAt}</p>
            </div>
            <div class="message__row2">
              <p class="message__content">
                ${message.message.message}
              </p>
            </div>
          </div>
    `;
        return html;
    };

    const socket = io();

    const token = document.cookie;
    const userInfoStr = decodeURIComponent(token.split(";")[1].split("=")[1]);
    const userInfo = JSON.parse(userInfoStr.replace("j:", ""));
    const { userName, email } = userInfo;

    const formMessage = document.getElementById("form-message");

    // xử lý query string (thư viện)
    const queryString = location.search;
    const params = Qs.parse(queryString, {
        ignoreQueryPrefix: true,
    });


    //join room
    socket.emit("client join room", { name, room });


    //gửi tin nhắn lên server
    formMessage.addEventListener("submit", (e) => {
        e.preventDefault();

        const inputMessage = document.getElementById("input-message");

        //kiểm tra trạng thái tin nhắn
        const acknowledgements = () => {
            // console.log("Gửi tin nhắn thành công");s
        };

        //gửi dữ tin nhắn lên server
        const message = inputMessage.value;
        if (message.trim().length !== 0) {
            socket.emit(
                "send-message-to-server",
                { userNameF: name, userNameT: userNameT, message: inputMessage.value },

            );

        }

        axios({
            method: 'post',
            url: '/user/createMessage',
            data: {
                userNameF: name,
                userNameT: userNameT,
                message: inputMessage.value
            }
        });

        inputMessage.value = "";
    });

    const messages = document.getElementById("messages");

    //Xử lý tin nhắn chat
    socket.on("server-send-message-to-client", (data) => {
        let html = renderMessage(data);
        document.getElementById("message-block").insertAdjacentHTML('beforeend', html);
    });

    //Gửi vĩ độ, kink độ lên server
    const btnShareLocation = document.getElementById("btn-share-location");
    btnShareLocation.addEventListener("click", (e) => {
        if (!navigator.geolocation) return alert("Trình duyệt của bạn không hỗ trợ");
        navigator.geolocation.getCurrentPosition((position) => {
            console.log(position);
            const { latitude, longitude } = position.coords;
            console.log(latitude, longitude);
            socket.emit("share-location", { userNameF: name, userNameT: userNameT, latitude, longitude });
        });
    });

    //xử lý share location:
    socket.on("server-send-location-to-client", (data) => {
        // const chatItem2 = document.createElement("li");
        let html = `
        <div class="message-item" id="message-item">
            <div class="message__row1">
              <p class="message__name">${data.userNameF}</p>
              <p class="message__date">${data.message.createdAt}</p>
            </div>
            <div class="message__row2">
              <a href = "${data.message.message}" target = "_blank" class="message__content">
               Vị trí của tôi
              </a>
            </div>
          </div>
    `;
        axios({
            method: 'post',
            url: '/user/createMessage',
            data: {
                userNameF: name,
                userNameT: userNameT,
                message: data.message.message
            }
        });
        document.getElementById("message-block").insertAdjacentHTML('beforeend', html);
    });

</script>